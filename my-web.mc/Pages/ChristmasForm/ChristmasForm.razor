@page "/christmas-form"
@page "/christmas-form/{Name}"

@using System.Text.Json
@using my_web.mc.Extensions
@inject HttpClient _client
@inject NavigationManager NavigationManager
@layout ChristmasFormLayout

<PageTitle>Unsecret Santa Questionnaire</PageTitle>

@if(Name != "All")
{
    <div class="grid max-w-[600px] m-[10px] sm:m-auto z-10">
        <EditForm Model="@_model" OnValidSubmit="SendToNorthPole">
            <div class="grid justify-stretch gap-5 px-[3em] py-[40px] text-[black] bg-[white] mt-6 rounded-lg project-card [&>label]:grid
                text-[12px] sm:text-[16px] lg:text-[18px]">
                <h1 class="xs:text-[2.5em] sm:text-[2.5em]">
                    unSecret Santa
                </h1>
                <h2>
                    Questionnaire
                </h2>
                <label>
                    <strong>Name</strong>
                    <input @bind="_model.Name" disabled="@_formDisabled" />
                </label>

                <label>
                    <strong>Book Format</strong>
                    <select @onchange="(v) => _model.Format = v.Value?.ToString()!" disabled="@_formDisabled">
                        @foreach (var format in new[] { "", "Physical", "Kindle" })
                        {
                            <option selected="@(format == _model.Format)">@format</option>
                        })
                    </select>
                </label>

                <label>
                    <strong>Book Wish List</strong>
                </label>
                <div class="grid gap-2">
                    @foreach (var i in Enumerable.Range(0, 3))
                    {
                        <label class="flex gap-4" style="align-items:end;">
                            <strong>@(i + 1)</strong>
                            <input class="flex-grow" @bind="_model.BookWishList[i]" disabled="@_formDisabled" />
                        </label>
                    }
                </div>

                <h3>My Favorites</h3>
                <div class="grid gap-5 pl-5" style="border-left: 3px dashed #9cff9c;">
                    @foreach (var category in FavoriteCategories)
                    {
                        <label class="grid">
                            <strong>@category</strong>
                            <input @bind="_model.Favorites[category]" disabled="@_formDisabled" />
                        </label>
                    }
                </div>
                @if (_formDisabled)
                {
                    <button @onclick="ToAll" class="m-auto btn">View Others</button>
                }
                else
                {
                    <button type="submit" class="m-auto btn">To: North Pole</button>
                }
            </div>
        </EditForm>
    </div>
} else
{
    <div class="flex place-content-center m-[auto] z-10 hover-highlight" style="
    max-width: 800px;
    align-items: center;
    gap: 100px;
    flex-wrap: wrap;">
        @foreach(var model in _models.OrderBy(x => x.Name))
        {
            var height = 100;
            var width = 300;
            <div style="background-color: white; border-radius: 8px; padding: 5px; overflow:hidden; cursor: pointer; position: relative;" @onclick="() => NavTo(model)">
                <div style="border: 1px solid green; border-radius: 5px; padding: 10px 3em; position: relative; width: @(width)px; height: @(height)px; display: grid; align-items: center; justify-content: center;">
                    @foreach(var value in Enumerable.Range(0, 6))
                    {
                        var r = Random.Shared.NextDouble() * 50 + 20;
                        var x = Random.Shared.NextDouble() * width - 30;
                        var y = Random.Shared.NextDouble() * height - 30;
                        var shade = Random.Shared.NextDouble() * 90;

                        <div style="border: 1px solid hsl(@(shade), 80%, 50%); background-color: hsla(@(shade), 50%, 80%, 20%); border-radius: 50%; height: @(r)px; width: @(r)px; position: absolute; top:  @(y)px; left:  @(x)px;"></div>
                    }
                    <h2 class="text-[black]" style="z-index: 100; border-bottom: 2px red dashed; width: 200px; line-height: 1em; text-align: center;">To: @model.Name</h2>
                </div>
                <div class="shade"></div>
            </div>
        }
    </div>
    <button class="m-auto btn z-10" @onclick="() => NavTo(null)">Write a letter to Santa!</button>
}


@code {
    [Parameter]
    public string? Name { get; set; }

    bool _formDisabled => Name is not null;

    List<FormModel> _models = [];

    FormModel _model = new();

    string[] FavoriteCategories = [
        "Colors",
    "Snacks",
    "Candle Scents",
    ];

    class FormModel
    {
        public string Name { get; set; } = string.Empty;

        public string Format { get; set; } = string.Empty;

        public string[] BookWishList { get; set; } = [
            string.Empty,
    string.Empty,
    string.Empty
        ];

        public Dictionary<string, string> Favorites { get; set; } = new Dictionary<string, string>(){
            {"Colors", ""},
            {"Snacks", ""},
            {"Candle Scents", ""}
        };
    }

    async Task SendToNorthPole(EditContext context)
    {
        if(context.Validate()){
            _model.Name = string.Join(' ', _model.Name.Trim().Split(' ').Select(x => x.CapitalizeFirstLetter()));
            var json = JsonSerializer.Serialize(_model);
            Console.WriteLine(json);
            var response = await _client.PostAsJsonAsync("api/christmas-form", _model);
            Console.WriteLine(response.StatusCode);
            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Successfully sent!");
                var existingModel = _models.SingleOrDefault(x => x.Name.ToLower() == _model.Name.ToLower());
                if (existingModel is not null)
                {
                    Console.WriteLine("Found existing model - removing it");
                    _models.Remove(existingModel);
                }
                _models.Add(_model);
                _model = new();
                NavigationManager.NavigateTo("christmas-form/All");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        List<FormModel> models = new();
        var response = await _client.GetFromJsonAsync<List<Dictionary<string, string>>>("api/christmas-form") ?? [];
        foreach(var dict in response)
        {
            var formModel = new FormModel()
            {
                Name = dict["name"],
                Format = dict["format"],
                BookWishList = new string[]{
                    dict["bookWishlist1"],
                    dict["bookWishlist2"],
                    dict["bookWishlist3"]
                },
                Favorites = new Dictionary<string, string>(){
                    {"Colors", dict["favoriteColor"]},
                    {"Snacks", dict["favoriteSnack"]},
                    {"Candle Scents", dict["favoriteCandleScent"]}
                }
            };

            models.Add(formModel);
        }
        _models = models;
        Console.WriteLine("Loaded models");
    }

    protected override void OnParametersSet()
    {
        if(Name is not null && Name.ToUpper() != "ALL")
        {
            _model = _models?.FirstOrDefault(x => x.Name == Name) ?? new FormModel();
        }

        if (Name?.ToUpper() == "ALL" && Name != "All")
        {
            ToAll();
        }
    }

    void ToAll()
    {
        NavigationManager.NavigateTo("christmas-form/All");
    }

    void NavTo(FormModel? model)
    {
        if(model is null)
        {
            _model = new FormModel();
            NavigationManager.NavigateTo("christmas-form");
        } else
        {
            NavigationManager.NavigateTo($"christmas-form/{model.Name}");            
        }
    }
}
